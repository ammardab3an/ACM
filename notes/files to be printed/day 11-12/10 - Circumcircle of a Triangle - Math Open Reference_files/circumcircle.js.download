


var drawArea = new Sprite();
var circle   = new Sprite();
var a        = new GeomPoint(300,60,      VISIBLE,   DRAGGABLE);
var b        = new GeomPoint(200,180,     VISIBLE,   DRAGGABLE);
var c        = new GeomPoint(420,225,     VISIBLE,   DRAGGABLE);
var triangle = new Poly( [a,b,c] , null, 0, ["A","B","C"] );

var e1;
var oRadius = {val:0};

var ab = new Length(a,b);
var ac = new Length(a,c);
var bc = new Length(b,c);


// Circumcenter
var circumcenter = new Sprite();
	var circumcenterPt = new GeomPoint(0,0,  VISIBLE,   NON_DRAGGABLE);
	var midA2 = new GeomPoint(0,0,  VISIBLE,   NON_DRAGGABLE);
	var midB2 = new GeomPoint(0,0,  VISIBLE,   NON_DRAGGABLE);
	var midC2 = new GeomPoint(0,0,  VISIBLE,   NON_DRAGGABLE);

    var t11 = new Ticmarks(a,midB2,1);
    var t12 = new Ticmarks(c,midB2,1);
    var t13 = new Ticmarks(b,midA2,2);
    var t14 = new Ticmarks(c,midA2,2);
    var t15 = new Ticmarks(a,midC2,3);
    var t16 = new Ticmarks(b,midC2,3);

	var endA = new GeomPoint(0,0,  INVISIBLE,   NON_DRAGGABLE);
	var endB = new GeomPoint(0,0,  INVISIBLE,   NON_DRAGGABLE);
	var endC = new GeomPoint(0,0,  INVISIBLE,   NON_DRAGGABLE);

	var perpBisectorAB = new GeomLine(endA, midA2,0,600,600);
	var perpBisectorBC = new GeomLine(endB, midB2,0,600,600);
	var perpBisectorAC = new GeomLine(endC, midC2,0,600,600);

	var rtangCA = new AngleMark(endA,midA2,c);
	var rtangCB = new AngleMark(endB,midB2,c);
	var rtangCC = new AngleMark(endC,midC2,a);

	var circumcenterColor = 0x666666;
	var circumcenterAlpha = 0.5;
	var radius;




function build() //called when the shared stuff has done loading
{   var msk =  makeMask(0,0,600,325);
	drawArea.mask = msk;
	addChild(msk);
	addChild(drawArea);

	//add controls
	addCommands([resetCmd , printCmd, fullCmd, showCmd]);

	with(drawArea)
		{
	      addChild(circle);addChild(triangle);
		  addChild(ab);
		  addChild(ac);
		  addChild(bc);
		}

	drawArea.addChild(circumcenterPt);   circumcenterPt.nonDragColor=circumcenterColor;
	drawArea.addChild(circumcenter);
	with (circumcenter)
	  { addChild(midA2);
		addChild(midB2);
		addChild(midC2);
        addChild(t11);
		addChild(t12);
		addChild(t13);
		addChild(t14);
		addChild(t15);
		addChild(t16);
		addChild(perpBisectorAB); with(perpBisectorAB) {lineColor = circumcenterColor;  lineAlpha = circumcenterAlpha;}
	    addChild(perpBisectorBC); with(perpBisectorBC) {lineColor = circumcenterColor;  lineAlpha = circumcenterAlpha;}
		addChild(perpBisectorAC); with(perpBisectorAC) {lineColor = circumcenterColor;  lineAlpha = circumcenterAlpha;}
		addChild(rtangCA);  with(rtangCA) { color = circumcenterColor;  colorAlpha = circumcenterAlpha; setMeasure(90); showDegs=false; }
		addChild(rtangCB);  with(rtangCB) { color = circumcenterColor;  colorAlpha = circumcenterAlpha; setMeasure(90); showDegs=false; }
		addChild(rtangCC);  with(rtangCC) { color = circumcenterColor;  colorAlpha = circumcenterAlpha; setMeasure(90); showDegs=false; }
	  }

	//Formula
    e1 = new Formula("'Circumcircle radius'=$oRadius", bScale, "formulaCenter");
    e1.container.style.fontSize = "15px";
    appendToBody(e1.container);

    //set up Hint
	hint = new Hint(b, Hint.BELOWLFT, "Drag any orange dot");
	addChild(hint);

	//add points last so on top
	addChild(a);
	addChild(b);
	addChild(c);

    //set up for first time through only
	animation = "introPause";

	update();	//adjust everything that is dependent on ang, the driver here

	//add event listener last.  Frame ticks now start going to animate().
	startTicking(1, animate);  //happens every frame
}




function reset() //set up app ready for user interaction
{
  animation = "stopped";
  graphics.clear();
  update();
}


function update()
{
	a.update();
	b.update();
	c.update();
	triangle.update();
	ab.update();
	ac.update();
	bc.update();

	updateCircumcenter();

	oRadius.val = radius;
	e1.visible = showingDetails;
    e1.update();

    repaint();

}


function updateCircumcenter()
{   circumcenter.visible = showingDetails;
    midA2.midPoint(b,c); midA2.update();
    midB2.midPoint(a,c); midB2.update();
    midC2.midPoint(a,b); midC2.update();

	var ticColor = 0x666666;
    t11.lineColor = ticColor; t11.update();
    t12.lineColor = ticColor; t12.update();
    t13.lineColor = ticColor; t13.update();
    t14.lineColor = ticColor; t14.update();
    t15.lineColor = ticColor; t15.update();
    t16.lineColor = ticColor; t16.update();

	endA.perpendicular(midA2, b,c, 250);
    endB.perpendicular(midB2, c,a, 250);
    endC.perpendicular(midC2, a,b, 250);

	perpBisectorAB.update();
	perpBisectorBC.update();
	perpBisectorAC.update();

	rtangCA.update();
	rtangCB.update();
	rtangCC.update();

    circumcenterPt.intersection(endA,midA2,  endB,midB2);
    circumcenterPt.update();

    //compute radius of circumcircle
    var la = bc.len(); //length of a
    var lb = ac.len(); //length of b
    var lc = ab.len(); //length of c
    radius = (la*lb*lc)/Math.sqrt( (la+lb+lc) * (lb+lc-la) * (lc+la-lb) * (la+lb-lc) );

	with(circle.graphics)
		{ clear();
		  lineStyle(1, 0xff00ff);
		  drawCircle(circumcenterPt.x, circumcenterPt.y, circumcenterPt.distance(a) );
		}
}



function pointMoved(e)
{  if(pointBeingMoved == a)  update();
   if(pointBeingMoved == b)  update();
   if(pointBeingMoved == c)  update();
}



function animStart()  //called when run button pressed
{ animation = "run";
}

function animStop()  //called when run button pressed
{ animation = "stopped";
}

var initVal;
function animate(event)  //call every frame tick - 30fps
{
  switch(animation)
	 { case "introPause":
	        if(timeElapsed(500))
			   { animation="intro";
			     initVal = c.x;
			   }
			break;

	   case "intro":
	        c.x -= 4;
	        update();
		    if(c.x <=300)
			   { animation="intro2";;
			   }
			break;

	   case "intro2":
	        c.x += 4;
	        update();
		    if(c.x >=initVal)
			   animation="hintPause";
			break;

	   case "hintPause":
		    if(timeElapsed(400))
			  { animation="introdone";
			    Hint.show();
				reset();
				// intro animation done and app is reset,
				// ready for user interaction
			  }
			break;


        default: break;
     }
}

startApplet();