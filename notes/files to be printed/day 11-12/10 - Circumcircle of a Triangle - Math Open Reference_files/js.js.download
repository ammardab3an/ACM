//

//
//		-- (c)	Copyright Math Open Reference 2011 --
//




function initPage(param) //called onload in body
{}





function goto(dest)
//Go to the page "dest".    The destination is always relative to the root
//  Eg goto("chord.html");   It figures out where we are now and navigates to that page
{ var url = location.href.toLowerCase();
  var csr = url.lastIndexOf('/');
  var key = url.substr(csr-3, 3);             //the three chars before the last '/'
  if(key=="eta" || key=="src" || key=="com")  //at root of beta, src or server
     location.href = dest;
  else
     location.href = "../"+dest;  //must one one dir down
}


function checkForEnterKey(e)
{
 var key = window.event	? e.keyCode	: e.which;

 if(key==13) doSearch();
}


//Navbar
function commentOnPage()
{ document.getElementById('refpage').value = document.title;
  document.getElementById('feedback').submit();
}

function emailPage()
{  document.getElementById('docTitle').value = document.title;
   document.getElementById('docUrl').value = myUrl();
   document.getElementById('emailto').submit();
}




//Browser	detect
function browserIsIE()
{  var browserName=navigator.appName;
   var res=  (browserName=="Microsoft Internet Explorer");
   return res;
}



function isHosted()
// returns true	if the site	is hosted on a web server.
{  var loc = location.href.toLowerCase();
   return (loc.substring(0,4) == "http");
}


function myUrl()
// returns the url of this page
{ return (window.location.href);
}



//		Nav	bar	helpers




// =================================
//		Search Engine
// =================================

// dict is an array of strings present on every page that contains a list of keywords.
// The match algorithm is not a straight string compare.  To allow for spelling errors
// it uses a closeness measure.  It calculates how many A's how many B's etc in each term, and then calculates
// how off this count is.  A perfect match will yield an error value of zero, a way off compare might produce a number of 12.
// The cutoff for no match is (2+half the length of the shortest argument).

var dict = [];
var searchRq = false;  //interlock to stop search start on indexpage load

function doSearch()
{    var indexPage;
     var searchStr = document.getElementById("searchArg").value;
     if(searchStr.length==0) return;

     var b = document.getElementById("searchbuffer");
     searchRq = true;

     //the address of the indexpage varies depending on if we are  in toc dir or not
    if(location.href.indexOf("tocs")>0)
      indexPage = "../indexpage.html";
    else
      indexPage = "indexpage.html";

    b.src = indexPage + "?" + searchStr;  //load the index page into the buffer iframe

/*     if (location.href.indexOf("common")>0)
		b.src = "indexpage.html?"+searchStr;
     else if(location.href.indexOf("tocs")>0)
		b.src = "../common/indexpage.html?"+searchStr;
     else
		 b.src = "common/indexpage.html?"+searchStr;*/
}



function continueSearch()

// called from  the buffer iFrame onload=
  {  if(!parent.searchRq) return;  //not a search request
     parent.searchRq = false;

   var srchStr = decodeURI(location.search.substr(1));

   var entries = document.body.innerHTML.toLowerCase(); //the index itself
   makeDict(entries);

   //split the search into its constituent words
   var keywordSet = srchStr.split(" ");

   //Accept the first word that returns a match.
   //Ultimately this should return the closest word or even the one with the fewest hits
   for(var j=0; j<keywordSet.length; j++)
     {  result = validateKeyword(keywordSet[j]);
        if(result>=0)
          {  parent.location.href = "../" + dict[result] + ".html";
            return;
          }
     }

   //none was even close - fail the search.
   parent.location.href = "notfound.html"; //we are in common dir
}




function validateKeyword(arg)

//	Checks 'keyword' against a list	of known good keywords in dict.
//	If it matches or nearly	matches	one	of them, the index of the keyword is returned.
//	Otherwise -1 is	returned.

{  var keyword = arg.toLowerCase();
   var smap	= mapOf(keyword);
   var dmap, closestWordIndex, bestScore=999, thisWord;

   for (var wordIndex=0;  wordIndex<dict.length;  wordIndex++)
   {  thisWord = dict[wordIndex];
	  if (thisWord == keyword)
		 return	wordIndex;
	  else
		{ dmap = mapOf(thisWord);
          //compare returns search distance in errors, this is augmented by diff in arg lengths
		  errors = compare(dmap, smap);
		  if(errors	< bestScore)
			{ bestScore	= errors;
			  closestWordIndex = wordIndex;
			}
		}
   }

   if (bestScore < 3 )
       return closestWordIndex;
   else
       return -1;
}


function mapOf(s)
  {	var c,	map	= new Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	for	( var i=0; i<s.length; i++)
	  {	c=s.charCodeAt(i);
		if(c>=97 &&	c<=122)	 //	a ..z
			map[c-97]++;
	  }
	return map;
  }


function compare(dmap, smap)
{ var errors=0;
  for (var i=0;	i<26; i++)
	{  errors += Math.abs(dmap[i]-smap[i]);
	}
  return errors;
}



function makeDict(entries)
{ var wordStart = 0, wordEnd, word;
  while(true)
	{ wordStart = entries.indexOf("<h4>", wordStart+1);
      if(wordStart<0) break;  //    loop exit >>
	  wordEnd = entries.indexOf("</h4>", wordStart);
	  word = entries.substring(wordStart+4, wordEnd);
      dict.push(word);
    }
}


//		Question hide/reveal
function reveal(obj)
{  document.getElementById(obj).style.visibility='visible';
}


function swap(me, obj)
{ me.style.display="none";
  document.getElementById(obj).style.display="inline";
}



function millisecTimeStamp()
{  var t = new Date();
   return t.getTime();
}



// Pop up	calculator
function showCalc()
{
  window.open('calculator.html', 'mywindow', 'width=950,height=730,status=no,resizable=yes,scrollbars=yes')
}




// =======================================
//                Loader
// =======================================

var device = null;
var appletLoadRq;
var widthLoadRq;
var heightLoadRq;
var appletName;
var appletContainerDiv = null;
var htmlParams="";  //the POST params in the url  EG ?param=32&p2=john....
var appletWid = 0;
var appletHt = 0;
var html5AppletIframe = null;
var iFrameSrcFile =""; //  Name of the iframe file to use to looad HTML5 applets





function loadJSApplet(applet, containerDiv, width, height, iFrameSRC)
// For JS applets where the HTML5 version is the only one there is.
// Ultimately, when all Flash applets are  gone this will be the only loader.
{ appletName = applet; //save to global
  appletWid = width;
  appletHt = height;
  appletContainerDiv = document.getElementById(containerDiv);

  // If the 5th param is not supplied use the default 'appletFrame' else use the name supplied.
  if(iFrameSRC == undefined)
	iFrameSrcFile = "appletframe";
  else
	iFrameSrcFile = iFrameSRC;

  loadActualApplet();
}



function loadActualApplet()
// loads an actual  HTML5 applet
{
   //create an iframe
   var ifrm = document.createElement('iframe');
   ifrm.setAttribute("name", "iframe");
   ifrm.setAttribute("frameBorder","0");
   ifrm.setAttribute("width", ""+appletWid);
   ifrm.setAttribute("height", ""+appletHt);
   ifrm.setAttribute("scrolling", "no");
   ifrm.style.overflow = "hidden";
   ifrm.style.border = "1px solid #bbbbdd";

   //install in container div.
   appletContainerDiv.innerHTML = "";  //remove the failed img tag
   appletContainerDiv.appendChild(ifrm);
   html5AppletIframe = ifrm;

   //launch it.  It's onload handler will do the rest
   //We pass in the name of the applet and its size

   //Load the iframe by setting its src.
   //If we are in source dir, use the debug version of the iFrame else the regular one

   var srcFileName ="common/" + iFrameSrcFile;  //they are all stored in /common
   if(location.href.indexOf("src")>0)
        srcFileName += "debug";     //debug versions have separate js files, vs one compressed one.'
   srcFileName += ".html";
   ifrm.src = srcFileName + "?applet="+appletName+"&wid="+appletWid+"&ht="+appletHt;
}





// Functions to handle the "save as link" cmd for function grapher
var tgtAddress;  //saved here so dest page can reach back and get it
var linkwindow;

function makeLink(linkAddress)
  { tgtAddress = linkAddress; //save in page global
    if(typeof(linkwindow)!="undefined") linkwindow.close(); //may be second call
    linkwindow =  window.open('graphlinks.html', 'mywindow', 'width=600,height=450,status=yes,resizable=true,scrollbars=yes,menubar=yes')
  }

function done()
  {   if(typeof(linkwindow)!="undefined") linkwindow.close();
  }


function isNumber(s)
{ return (s>='0' && s<='9') || s=='.';
}

function isVarnameChar(s)
{ var us = s.toLowerCase();
  return(us>='a' && us<='z')  || s=='_' || isNumber(s);
}

function appendToBody(obj)
{ var bod= document.getElementsByTagName('body')[0];
  bod.appendChild(obj);
}


function getCurrentScript()
{  if(document.currentScript)
	 { return document.currentScript;
     }
   else
     { var scripts = document.getElementsByTagName('script');
	   return scripts[scripts.length-1];
	 }
}



//Obsolete
function bookmarkPageIE(){}
function bookmarkSiteIE() {}






function Equation (param, classname, style, suppliedContainer, pScale)
{

Equation.prototype.makeContainer = function(classname, style)
{
	var container = document.createElement("span");
    container.style.whiteSpace = "nowrap";
    if(classname) container.className = classname;
    if(style)     container.style.cssText = style;

    var thisScript = getCurrentScript();
    return thisScript.parentNode.insertBefore(container, thisScript);
};


Equation.prototype.substitute = function substitute(str)
{ res = str;

  res = res.split("@sin")     . join("'\u202Fsin\u202F'");
  res = res.split("@cos")     . join("'\u202Fcos\u202F'");
  res = res.split("@tan")     . join("'\u202Ftan\u202F'");
  res = res.split("@csc")     . join("'\u202Fcsc\u202F'");
  res = res.split("@cot")     . join("'\u202Fcot\u202F'");
  res = res.split("@sec")     . join("'\u202Fsec\u202F'");
  res = res.split("@pi")      . join("\u03c0");
  res = res.split("@plusmin") . join("\u00B1");
  res = res.split("@sqrt")    . join("\u221A");
  res = res.split("@times")   . join("\u00D7");
  res = res.split("-")        . join("\u2212");
  res = res.split("@dot")     . join("\u00B7");
  res = res.split("@deg")     . join("\u00B0");
  res = res.split("@sp")      . join("\u2008");
  res = res.split("@ang")     . join("\u2220");
  res = res.split("@sub")     . join("`");
  res = res.split("@le")      . join("\u202F\u2264\u202F");
  res = res.split("@ge")      . join("\u202F\u2265\u202F");
  res = res.split("@theta")   . join("\u03B8");
  res = res.split("@div")     . join("\u00F7");
  res = res.split("@inf")     . join("\u221E");
  return res;
};


Equation.prototype.tokenize = function(str)
{
   var tokens = [];
   tokens.push('{');
   for(var i=0; i<str.length; i++)
	  {
	    if(str[i]=="'")
	      { var strEnd = str.indexOf("'", i+1);
            if(strEnd<0) //missing closing '
               strEnd = str.length; //use whole string and end outer loop
            tokens.push(str.substring(i+1, strEnd) );
		    i = strEnd;
	      }

	    else if(isNumber(str[i]))  //extract the number string
	      { var val = "";
            while(i<str.length && isNumber(str[i]) )
               { val += str[i++];
               }
            tokens.push(val);
            i--;
	      }

        else if(str[i]=="$")        //variable.  Get the var name
	      { tokens.push(str[i++]);      //keep the $, step to next
            var varname = "";
            while(i<str.length && isVarnameChar(str[i]) )
                { varname += str[i++];
                }
            tokens.push(varname);
            i--;
	      }

        else if(str[i] != ' ')
          { tokens.push(str[i]);
          }

	  }      //for
   tokens.push('}');
   return tokens;
};



Equation.prototype.makeParens = function()
{
   var root = newNode();  //make a paren unit
   with(root.style)
	{ display = "inline-table"; //strips have a 'table' as the root.
      verticalAlign="middle";
      top =".05em";               //nested units move up a bit each time, so compensate
	}

   var item = this.vector.shift();  //preload the loop
   var endCh = item=='(' ?  ')' : '}';

   do
	{ if(item !='}'  && item!='{')
          { var node = newNode(root);
            node.innerHTML = item;

            //put a little space on each side of an equals sign
            if(item=="=") node.style.padding = "0 0.3em";  //l-r padding only

            //put a little air each side of a plus and minus operator
            if(item=="\u2212") node.style.padding = "0 0.06em";  //l-r padding only
            if(item=="+")      node.style.padding = "0 0.06em";  //l-r padding only
          }

      if(item == endCh || this.vector.length==0)
          return root;

      if(this.vector[0]=='{'  || this.vector[0]=='(')  //recurse vec[0] is the next to be read
		{ var elemNode = newNode(root);
          var subTree = this.makeParens();
          elemNode.appendChild(subTree);
		}

      item = this.vector.shift(); //next.  Consumes the vector
	}
   while (true);
};




Equation.prototype.fixHTML = function(rootNode, userFn, chr)
// For any element that contains CHR, execute the userFn against it.
{ var divList = rootNode.getElementsByTagName("div");
  var tgtList = [];

  for(var i=0; i<divList.length; i++)
    { var thisNode = divList[i];
      if(thisNode.firstChild && thisNode.firstChild.nodeValue == chr)
		 { tgtList.push(thisNode);
         }
    }

  for(var i=0 ; i<tgtList.length; i++)
	{ userFn.call(this,tgtList[i]); //executes in the Equation context
	}
};


Equation.prototype.leftParenSwap = function(node)
{ if(node.parentNode.getElementsByClassName("frac").length>0)//contains fractions in the paren unit
	{ node.innerHTML ="&nbsp;";
	  with(node.style)
		{ borderStyle            = "solid";
		  borderTopLeftRadius    = "100% 50%";
		  borderBottomLeftRadius = "100% 50%";
		  borderWidth            = "0 0 0 " + this.lineWid+"px";
          paddingLeft            = "1px";
		}
      //insert a spacer div in front
      var spacer = document.createElement("div");
      node.parentNode.insertBefore(spacer, node);
      spacer.style.width="0.1em";
    }
};

Equation.prototype.rightParenSwap = function(node)
{ if(node.parentNode.getElementsByClassName("frac").length>0) //contains fractions in the paren unit
     {  node.innerHTML ="&nbsp;";
        with(node.style)
	        { borderStyle             = "solid";
	          borderTopRightRadius    = "100% 50%";
	          borderBottomRightRadius = "100% 50%";
	          borderWidth             = "0 " +this.lineWid+ "px 0 0";
              paddingLeft             = "1px";
            }
      //insert a spacer div after
      var spacer = document.createElement("div");
      node.parentNode.insertBefore(spacer, node.nextSibling);
      spacer.style.width="0.1em";

     }
};


Equation.prototype.exponents = function(node)
{ var next = node.nextSibling;
  var prev = node.previousSibling;
  node.firstChild.nodeValue = "";   //lose the '^'

  var unit = newNode(node);
  with(unit.style)
	{ display     = "inline-table";
      paddingLeft = ".1em";   // padding both sides of a base/exp unit
      paddingRight= ".1em";   //right needs less due to small font size
    }
  unit.className = "exp";

  unit.appendChild(prev);
  unit.appendChild(next);
  with(next.style)
    { fontSize      = "80%";
      verticalAlign = "top";
      top           = "-1px";
      left          = "1px";
    }
};


Equation.prototype.subscripts = function(node)
{ var next = node.nextSibling;
  var prev = node.previousSibling;
  node.firstChild.nodeValue = "";   //lose the '`'

  var unit = newNode(node);
  with(unit.style)
	{ display     = "inline-table";
      paddingLeft = ".3em";   //padding both sides of a base/sub unit
      paddingRight= ".2em";   //right needs less due to small font size
    }
  unit.className = "sub";

  unit.appendChild(prev);
  unit.appendChild(next);
  with(next.style)
    { fontSize      = "80%";
      verticalAlign = "bottom";
      left          = "1px";
    }
};

Equation.prototype.absolute = function(node)
{ node.firstChild.nodeValue = "";   //lose the '`'

  var prev = node.previousSibling;
  if(prev) prev.style.paddingRight=".2em";

  var next = node.nextSibling;
  if(next) next.style.paddingLeft=".2em";

  //make the node have a single border
  with(node.style)
	{ borderLeft = ".1em solid ";
    }

};

Equation.prototype.radicals = function(node)
// The radical sign and the radicand must be together in a unit
// so the rad sign is the right height and the whole thing is a unit for other operators.
{  node.firstChild.nodeValue = "";  //remove the radical sign.  Node becomes the host of the block
   var unit = newNode(node);
   unit.style.display = "inline-table";  //make it a unit
   unit.style.verticalAlign = "middle";  //make it a unit

   unit.className = "sqrt";

   var radical = newNode(unit);
   radical.innerHTML = "\u221A";
   with( radical.style)
	  { paddingLeft = ".3em";
        radical.style.fontSize = "1.2em";
        radical.style.top="0.2em";
      }
   unit.appendChild(radical);

   with(node.nextSibling.style)
	 { borderTop = "1px solid" ;
	 }
   unit.appendChild(node.nextSibling);
};


Equation.prototype.radicalSigns = function(node)
// Fixes up tall radical signs.   Node will be pointing at the element with the radical sign in it.
// Has to be done last, after the fractions have been set up.
{  var radicand = node.nextSibling;
   if(radicand.getElementsByClassName("frac").length > 0)  //radicand has a fraction in it, so tall needed
     {  //remove the existing radical and set its width manually
        node.innerHTML ="";
        node.style.width = "0.9em";

        //add a descendant div with the radical in it.
        var newNode = document.createElement("div");
        node.appendChild(newNode);
        newNode.innerHTML = "\u221A";
        with(newNode.style)
			{ fontSize        = "200%";
			  transformOrigin = webkitTransformOrigin = "top right";
			  transform       = webkitTransform       = "scaleX(0.6)";
			  position        = "absolute";
			  top             = ".28em";
			  right           = "0";

			}
	 }
    else
     { radicand.style.paddingLeft = "0.2em";  //single line radicand spacing
     }
};


Equation.prototype.variables = function(node)
{ var next = node.nextSibling;
  varEntry = {};
  varEntry.name = next.innerHTML;
  varEntry.domNode = next;
  this.varTable.push(varEntry);
  node.parentNode.removeChild(node);  //lose the $
};


Equation.prototype.fractions = function(node)
// Thye node conataining the '/' becomes the parent of a unit that has the top and bottom parts as
// block-mode divs
{  node.firstChild.nodeValue = "";  //remove the '/' .  Node becomes the host of the unit
   var unit = newNode(node);
   unit.style.display = "inline-table";  //make it a unit
   unit.style.verticalAlign="middle";
   unit.style.padding = "0 0.2em";

   unit.className = "frac";  //so we can find them again

   var prev = node.previousSibling; // numerator
   with(prev.style)
		{ display   = "block";
        }

   var next = node.nextSibling;   //denominator
   with(next.style)
		{ display   = "block";
          borderTop = "1px solid";
        }
   unit.appendChild(prev);
   unit.appendChild(next);
};





Equation.prototype.update = function()
{ //control visibility in Formula version
  this.container.style.visibility = this.visible? "visible" : "hidden";
  //update the values of all the variables, if any
  var decPlaces, plusSign, trailZeros;

  for (var i=0; i<this.varTable.length; i++)
    { var elem = this.varTable[i].domNode;
      var varName = this.varTable[i].name;
      var value = window[varName];

      //var name can point to a global var directly, or an object with the value in "val" and a set of optional parameters.
      if(typeof value == 'object') //can have a value and some parameters
		{  var obj = value;
           value = value.val;
           elem.className = (typeof obj.classname  == 'string' )?  obj.classname   :  "vardefault" ;
           decPlaces      = (typeof obj.decPlaces  == 'number' )?  obj.decPlaces   :  2            ;
           plusSign       = (typeof obj.plusSign   == 'boolean')?  obj.plusSign    :  false        ;
           trailZeros     = (typeof obj.trailZeros == 'boolean')?  obj.trailZeros  :  true         ;

           if(typeof value != "string")
              { value = asString(value,  decPlaces, plusSign, trailZeros);
                if (plusSign)
					{ value = addSign(value); //add plusisgn even if zero.  asString doesnt do that
                    }
              }
        }
      elem.innerHTML = value;
    }
};



this.visible = true;
this.varTable = [];
this.scale = pScale?  pScale : 1;
this.container = suppliedContainer?  suppliedContainer : this.makeContainer(classname, style);

//determine linewidth for fake parentheses
this.lineWid = Math.ceil(this.scale);  //in pixels
if(parseInt(getComputedStyle(this.container,null).fontWeight) > 600) this.lineWid++;  //bold is usually 700

this.inputStr = this.substitute(param);
this.vector = this.tokenize(this.inputStr);

var divTree = this.makeParens();
this.container.appendChild(divTree);
this.fixHTML(divTree, this.variables,'$');

this.fixHTML(divTree, this.exponents,'^');
this.fixHTML(divTree, this.subscripts,'`');
this.fixHTML(divTree, this.radicals,'\u221A');
this.fixHTML(divTree, this.fractions,'/');
this.fixHTML(divTree, this.absolute,'|');

//the next passes only change the cosmetics, not the node structure
this.fixHTML(divTree, this.radicalSigns,'\u221A');
this.fixHTML(divTree, this.leftParenSwap,'(');
this.fixHTML(divTree, this.rightParenSwap,')');
this.update();


function newNode(parent)
{var elem = document.createElement("div");
 if(parent)  parent.appendChild(elem);
 with(elem.style)
   { display       = "table-cell";  //border="1px solid gray"; fontSize="30px";
     lineHeight    = "1.1em";
     paddingBottom = "0.07em";
     verticalAlign = "baseline";
     textAlign     = "center";
     position      = "relative";
     boxSizing     = "border-box";
     borderSpacing = "0";
   }
 return elem;
};


// End Equation Object
}



function Formula (pEquation, pScale, pClassName)
{
    this.container = document.createElement("div");
    this.container.className = pClassName;

    // We may be in a full screen state and need to enlarge the font size by 'pscale'
    // pScale is a number 1..n where 1 = 100%  Only do this if full screen,
    // since the font size on phones overrides the CSS class fontsize
    if(pScale>1)
	   { this.container.style.fontSize = Math.round(pScale*100)+"%";
       }

	this.eqn = new Equation(pEquation, null, null, this.container, pScale);  //container provided
    return this.eqn;

	this.update = function()
	{ this.eqn.update();
	}
}




function showDom(root, level, input)
{ console.log(input);
  console.log(" ");
  showDom2(root, level);
}

function showDom2(root, level)
{ //show this node
  var sp = ""; for(var i=0; i<level*3; i++) sp+=" ";
  var out = sp;
  out += root.nodeName;
  if(root.nodeName == "#text") out += "    "+root.nodeValue;
  if(root.style)
	 with(root.style)
     	{ if (display=="inline-table") out += "   unit";
          if (display=="table-cell"  ) out += "   elem";
                                       out += "  "+root.className;
        }
  console.log(out);

  //show the decendants
  var node = root.firstChild;
   while (node)
       { showDom2(node, level+1);
         node = node.nextSibling;
       }


}
